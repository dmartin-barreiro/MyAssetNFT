{
  "address": "0x30896849616Edff4918D95efb635c856A3605Cfc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LoansUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "acceptLoanRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allLoanRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartContractAddressOfNFT",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenIdNFT",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endLoanTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanNFT.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "cancelLoanRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartContractAddressOfNFT",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenIdNFT",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumPeriod",
          "type": "uint256"
        }
      ],
      "name": "createLoanRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "endLoanRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseLoans",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoanRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPauseLoans",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0844eed08cf628666656bb40c56489d8dfe2ac864a7c6e8881f70570bf9d1ffd",
  "receipt": {
    "to": null,
    "from": "0x3Efef52B7b3f007120Db1E2F92Ce854Ffe9028a4",
    "contractAddress": "0x30896849616Edff4918D95efb635c856A3605Cfc",
    "transactionIndex": 2,
    "gasUsed": "1086799",
    "logsBloom": "0x
    "blockHash": "0x97e842b92e9f86720e6d6d2b188092e1ed5e7b3f390b6edc90bacb8ac318149d",
    "transactionHash": "0x0844eed08cf628666656bb40c56489d8dfe2ac864a7c6e8881f70570bf9d1ffd",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 20390250,
        "transactionHash": "0x0844eed08cf628666656bb40c56489d8dfe2ac864a7c6e8881f70570bf9d1ffd",
        "address": "0x30896849616Edff4918D95efb635c856A3605Cfc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003efef52b7b3f007120db1e2f92ce854ffe9028a4"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x97e842b92e9f86720e6d6d2b188092e1ed5e7b3f390b6edc90bacb8ac318149d"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 20390250,
        "transactionHash": "0x0844eed08cf628666656bb40c56489d8dfe2ac864a7c6e8881f70570bf9d1ffd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003efef52b7b3f007120db1e2f92ce854ffe9028a4",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001ee380e2b2b0000000000000000000000000000000000000000000000000000db2536c13b8a0000000000000000000000000000000000000000000000000cfbb2209d040d55e030000000000000000000000000000000000000000000000000d936feb3105f0000000000000000000000000000000000000000000000000cfbb40ed5123880e03",
        "logIndex": 4,
        "blockHash": "0x97e842b92e9f86720e6d6d2b188092e1ed5e7b3f390b6edc90bacb8ac318149d"
      }
    ],
    "blockNumber": 20390250,
    "cumulativeGasUsed": "1264571",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "44b44272e6db255a8d0e0a09034538d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LoansUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"acceptLoanRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLoanRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartContractAddressOfNFT\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenIdNFT\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endLoanTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanNFT.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"cancelLoanRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartContractAddressOfNFT\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenIdNFT\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumPeriod\",\"type\":\"uint256\"}],\"name\":\"createLoanRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"endLoanRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseLoans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoanRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseLoans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoanNFT.sol\":\"LoanNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/LoanNFT.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n//import \\\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n//contract LoanNFT is IERC721Receiver, Pausable, Ownable {\\ncontract LoanNFT is Pausable, Ownable {\\n\\n    event LoansUpdated();\\n    \\n\\n    enum Status { PENDING, ACTIVE, CANCELLED, ENDED, DEFAULTED }\\n\\n    struct LoanRequest {\\n        uint256 loanID;\\n        address payable lender;\\n        address payable borrower;\\n        address smartContractAddressOfNFT;\\n        uint32 tokenIdNFT;\\n        uint256 loanAmount;     //Amount borrow + interest amount\\n        uint256 interestAmount; //Total amount of interest to pay at the end of the loan\\n        uint256 maximumPeriod;   //Max number of months\\n        uint256 endLoanTimeStamp;\\n        Status status;\\n    }\\n\\n    uint public totalLoanRequests;\\n    mapping(uint => LoanRequest) public allLoanRequests;\\n\\n    modifier isValidLoanID(uint loanID) {\\n        require( loanID < totalLoanRequests, \\\"Loan ID is invalid.\\\");\\n        _;\\n    }\\n\\n    constructor()  {\\n        totalLoanRequests = 0;\\n    }\\n\\n    // Equivalent to 'bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))'\\n    // Or this.onERC721Received.selector\\n    //function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public override pure returns (bytes4) {\\n    //    return 0x150b7a02;\\n    //}\\n\\n    function pauseLoans() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unPauseLoans() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    //The user can request a loan in ethr using as collateral a NFT. \\n    //if someone accepts the loan (lender), will transfer ether to the user owner of the NFT.\\n    //at the end of the period the lender will get the loan plus an interest\\n    function createLoanRequest(address smartContractAddressOfNFT,\\n                                uint32 tokenIdNFT,\\n                                uint256 loanAmount,\\n                                uint256 interestAmount,\\n                                uint256 maximumPeriod) public  {\\n        require(interestAmount < loanAmount, \\\"Interest must be lower than the loan.\\\");\\n        require(maximumPeriod < 12, \\\"Maximum interest periods are 12 months.\\\");\\n        require(maximumPeriod > 0, \\\"Maximum interest period cannot be 0.\\\");\\n\\n        //get the NFT\\n        IERC721 currentNFT = IERC721(smartContractAddressOfNFT);\\n        require(currentNFT.getApproved(tokenIdNFT) == address(this), \\\"Transfer has to be approved first\\\");\\n\\n        //Save the loan request\\n        LoanRequest storage loanRequest =  allLoanRequests[totalLoanRequests];\\n        loanRequest.loanID = totalLoanRequests;\\n        loanRequest.lender = payable(address(0x0));\\n        loanRequest.borrower = payable(msg.sender);\\n        loanRequest.smartContractAddressOfNFT = smartContractAddressOfNFT;\\n        loanRequest.tokenIdNFT = tokenIdNFT;\\n        loanRequest.loanAmount = loanAmount;\\n        loanRequest.interestAmount = interestAmount;\\n        loanRequest.maximumPeriod = maximumPeriod;\\n        loanRequest.status = Status.PENDING;\\n        \\n        // Increment number of load request\\n        totalLoanRequests = totalLoanRequests + 1;\\n        \\n        //transfert the nft to the contract address\\n        currentNFT.safeTransferFrom(msg.sender, address(this), tokenIdNFT);\\n        emit LoansUpdated();\\n    }\\n\\n    //The lender accepts a loan request. The NFT is deposited in the loan smart contract, and \\n    function acceptLoanRequest(uint256 loanID) payable public isValidLoanID(loanID) whenNotPaused {\\n        require(allLoanRequests[loanID].status == Status.PENDING, \\\"Status is PENDING for loan.\\\");\\n        require(allLoanRequests[loanID].borrower != msg.sender, \\\"Invalid operation. You cannot underwrite your own loan.\\\");\\n\\n        // The lender is require to underwrite the total loan amount minus the interest\\n        // For the first period of the loan\\n        uint256 netAmount = allLoanRequests[loanID].loanAmount - allLoanRequests[loanID].interestAmount;   \\n        require(msg.value >= netAmount, \\\"Not enough Ether sent to function to underwrite loan.\\\");\\n\\n        allLoanRequests[loanID].lender = payable(msg.sender);   //the lender address is saved, it will be need it at the end of the loan\\n        allLoanRequests[loanID].status = Status.ACTIVE;\\n       \\n        allLoanRequests[loanID].endLoanTimeStamp = block.timestamp+allLoanRequests[loanID].maximumPeriod;\\n\\n        // The lender sends the money to the user who has requested the loan. The lenders sends the loan amount - interestAmount\\n        // he gets less, because the loan amount includes the interest amount.\\n        allLoanRequests[loanID].borrower.transfer(netAmount);   \\n        emit LoansUpdated();\\n    }\\n\\n    //It is called by the borrower. He returns the loan amount to the lender\\n    function endLoanRequest(uint256 loanID) payable public isValidLoanID(loanID) {\\n        require(allLoanRequests[loanID].status == Status.ACTIVE, \\\"Status is ACTIVE to end loan.\\\");\\n        require((msg.sender == allLoanRequests[loanID].lender  && block.timestamp >= allLoanRequests[loanID].endLoanTimeStamp) \\n                || msg.sender == allLoanRequests[loanID].borrower, \\\"Unable to end loan.\\\");\\n\\n        // Borrower sends loan plus the interest amount back to lender\\n        if (msg.sender == allLoanRequests[loanID].borrower) {\\n            require(msg.value >= allLoanRequests[loanID].loanAmount, \\\"the \\\");\\n            allLoanRequests[loanID].status = Status.ENDED;\\n            allLoanRequests[loanID].lender.transfer(allLoanRequests[loanID].loanAmount);\\n        } else {\\n            allLoanRequests[loanID].status = Status.DEFAULTED;\\n        }\\n\\n        // NFT is sent to the function caller (the lender or borrower).\\n        IERC721 currentNFT = IERC721(allLoanRequests[loanID].smartContractAddressOfNFT);\\n        currentNFT.approve(msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        currentNFT.transferFrom(address(this), msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        emit LoansUpdated();\\n    }\\n    \\n    //The borrower cancels his loan request and gets back his NFT\\n    function cancelLoanRequest(uint loanID) public isValidLoanID(loanID) {\\n        require(allLoanRequests[loanID].status == Status.PENDING, \\\"Status is not PENDING to cancel loan request\\\");\\n        require(msg.sender == allLoanRequests[loanID].borrower);\\n\\n        allLoanRequests[loanID].status = Status.CANCELLED;\\n\\n        IERC721 currentNFT = IERC721(allLoanRequests[loanID].smartContractAddressOfNFT);\\n        currentNFT.approve(msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        currentNFT.transferFrom(address(this), msg.sender, allLoanRequests[loanID].tokenIdNFT);\\n        emit LoansUpdated();\\n    }\\n}\",\"keccak256\":\"0x159ac90a923b1466ce10a289d926da6b7e71eff302205a8671abc21b3785dd3c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff191690556100243361002e565b6000600155610087565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b611232806100966000396000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101da578063908ef646146102105780639439f64714610225578063c16f547e14610245578063f2fde38b14610258578063f9e7d3d11461027857600080fd5b80635a680367146100ac5780635c975abb146100ce578063634609c2146100f6578063715018a61461018e5780637331978f146101a3578063765d9491146101b6575b600080fd5b3480156100b857600080fd5b506100cc6100c73660046110a4565b61028d565b005b3480156100da57600080fd5b5060005460ff1660405190151581526020015b60405180910390f35b34801561010257600080fd5b506101786101113660046110a4565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460089097015495976001600160a01b03908116979581169690851695600160a01b90950463ffffffff16949060ff168a565b6040516100ed9a9998979695949392919061111e565b34801561019a57600080fd5b506100cc6104cd565b6100cc6101b13660046110a4565b610509565b3480156101c257600080fd5b506101cc60015481565b6040519081526020016100ed565b3480156101e657600080fd5b5060005461010090046001600160a01b03166040516001600160a01b0390911681526020016100ed565b34801561021c57600080fd5b506100cc610796565b34801561023157600080fd5b506100cc61024036600461104c565b6107ce565b6100cc6102533660046110a4565b610afc565b34801561026457600080fd5b506100cc61027336600461100d565b610dc9565b34801561028457600080fd5b506100cc610e6a565b8060015481106102b85760405162461bcd60e51b81526004016102af906110bc565b60405180910390fd5b60008281526002602052604081206008015460ff1660048111156102ec57634e487b7160e01b600052602160045260246000fd5b1461034e5760405162461bcd60e51b815260206004820152602c60248201527f537461747573206973206e6f742050454e44494e4720746f2063616e63656c2060448201526b1b1bd85b881c995c5d595cdd60a21b60648201526084016102af565b600082815260026020819052604090912001546001600160a01b0316331461037557600080fd5b6000828152600260208190526040909120600801805460ff19166001835b02179055506000828152600260205260409081902060030154905163095ea7b360e01b8152336004820152600160a01b820463ffffffff1660248201526001600160a01b0390911690819063095ea7b3906044015b600060405180830381600087803b15801561040257600080fd5b505af1158015610416573d6000803e3d6000fd5b505050600084815260026020526040908190206003015490516323b872dd60e01b8152306004820152336024820152600160a01b90910463ffffffff1660448201526001600160a01b03831691506323b872dd90606401600060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b50506040517f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b3768925060009150a1505050565b6000546001600160a01b036101009091041633146104fd5760405162461bcd60e51b81526004016102af906110e9565b6105076000610ea2565b565b80600154811061052b5760405162461bcd60e51b81526004016102af906110bc565b600160008381526002602052604090206008015460ff16600481111561056157634e487b7160e01b600052602160045260246000fd5b146105ae5760405162461bcd60e51b815260206004820152601d60248201527f5374617475732069732041435449564520746f20656e64206c6f616e2e00000060448201526064016102af565b6000828152600260205260409020600101546001600160a01b0316331480156105e857506000828152600260205260409020600701544210155b8061060d5750600082815260026020819052604090912001546001600160a01b031633145b61064f5760405162461bcd60e51b81526020600482015260136024820152722ab730b13632903a379032b732103637b0b71760691b60448201526064016102af565b600082815260026020819052604090912001546001600160a01b031633141561071f576000828152600260205260409020600401543410156106bc5760405162461bcd60e51b81526004016102af9060208082526004908201526303a3432960e51b604082015260600190565b60008281526002602052604080822060088101805460ff19166003179055600181015460049091015491516001600160a01b03909116926108fc831502929190818181858888f19350505050158015610719573d6000803e3d6000fd5b50610742565b600082815260026020526040902060080180546004919060ff1916600183610393565b6000828152600260205260409081902060030154905163095ea7b360e01b8152336004820152600160a01b820463ffffffff1660248201526001600160a01b0390911690819063095ea7b3906044016103e8565b6000546001600160a01b036101009091041633146107c65760405162461bcd60e51b81526004016102af906110e9565b610507610efb565b82821061082b5760405162461bcd60e51b815260206004820152602560248201527f496e746572657374206d757374206265206c6f776572207468616e20746865206044820152643637b0b71760d91b60648201526084016102af565b600c811061088b5760405162461bcd60e51b815260206004820152602760248201527f4d6178696d756d20696e74657265737420706572696f6473206172652031322060448201526636b7b73a34399760c91b60648201526084016102af565b600081116108e75760405162461bcd60e51b8152602060048201526024808201527f4d6178696d756d20696e74657265737420706572696f642063616e6e6f7420626044820152633290181760e11b60648201526084016102af565b60405163020604bf60e21b815263ffffffff85166004820152859030906001600160a01b0383169063081812fc9060240160206040518083038186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109689190611030565b6001600160a01b0316146109c85760405162461bcd60e51b815260206004820152602160248201527f5472616e736665722068617320746f20626520617070726f76656420666972736044820152601d60fa1b60648201526084016102af565b60018054600081815260026020819052604090912091825581830180546001600160a01b031990811690915590820180549091163317905560038101805463ffffffff8916600160a01b026001600160c01b03199091166001600160a01b038b161717905560048101869055600581018590556006810184905560088101805460ff1916905581549091610a5c91906111a2565b600155604051632142170760e11b815233600482015230602482015263ffffffff871660448201526001600160a01b038316906342842e0e90606401600060405180830381600087803b158015610ab257600080fd5b505af1158015610ac6573d6000803e3d6000fd5b50506040517f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b3768925060009150a150505050505050565b806001548110610b1e5760405162461bcd60e51b81526004016102af906110bc565b60005460ff1615610b645760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102af565b60008281526002602052604081206008015460ff166004811115610b9857634e487b7160e01b600052602160045260246000fd5b14610be55760405162461bcd60e51b815260206004820152601b60248201527f5374617475732069732050454e44494e4720666f72206c6f616e2e000000000060448201526064016102af565b600082815260026020819052604090912001546001600160a01b0316331415610c765760405162461bcd60e51b815260206004820152603760248201527f496e76616c6964206f7065726174696f6e2e20596f752063616e6e6f7420756e60448201527f646572777269746520796f7572206f776e206c6f616e2e00000000000000000060648201526084016102af565b60008281526002602052604081206005810154600490910154610c9991906111ba565b905080341015610d095760405162461bcd60e51b815260206004820152603560248201527f4e6f7420656e6f7567682045746865722073656e7420746f2066756e6374696f60448201527437103a37903ab73232b93bb934ba32903637b0b71760591b60648201526084016102af565b6000838152600260205260409020600180820180546001600160a01b0319163317905560088201805460ff1916909117905560060154610d4990426111a2565b6000848152600260208190526040808320600781019490945592015491516001600160a01b039092169183156108fc0291849190818181858888f19350505050158015610d9a573d6000803e3d6000fd5b506040517f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b376890600090a1505050565b6000546001600160a01b03610100909104163314610df95760405162461bcd60e51b81526004016102af906110e9565b6001600160a01b038116610e5e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102af565b610e6781610ea2565b50565b6000546001600160a01b03610100909104163314610e9a5760405162461bcd60e51b81526004016102af906110e9565b610507610f93565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60005460ff1615610f415760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102af565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f763390565b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16610fdc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102af565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610f76565b60006020828403121561101e578081fd5b8135611029816111e7565b9392505050565b600060208284031215611041578081fd5b8151611029816111e7565b600080600080600060a08688031215611063578081fd5b853561106e816111e7565b9450602086013563ffffffff81168114611086578182fd5b94979496505050506040830135926060810135926080909101359150565b6000602082840312156110b5578081fd5b5035919050565b6020808252601390820152722637b0b71024a21034b99034b73b30b634b21760691b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8a81526001600160a01b038a8116602083015289811660408301528816606082015263ffffffff8716608082015260a0810186905260c0810185905260e08101849052610100810183905261014081016005831061118c57634e487b7160e01b600052602160045260246000fd5b826101208301529b9a5050505050505050505050565b600082198211156111b5576111b56111d1565b500190565b6000828210156111cc576111cc6111d1565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610e6757600080fdfea264697066735822122070b50e5c0c7e91a412a3b328c8af309e9b45e94b89ea330a1bf00714b8cc0c0164736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101da578063908ef646146102105780639439f64714610225578063c16f547e14610245578063f2fde38b14610258578063f9e7d3d11461027857600080fd5b80635a680367146100ac5780635c975abb146100ce578063634609c2146100f6578063715018a61461018e5780637331978f146101a3578063765d9491146101b6575b600080fd5b3480156100b857600080fd5b506100cc6100c73660046110a4565b61028d565b005b3480156100da57600080fd5b5060005460ff1660405190151581526020015b60405180910390f35b34801561010257600080fd5b506101786101113660046110a4565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460089097015495976001600160a01b03908116979581169690851695600160a01b90950463ffffffff16949060ff168a565b6040516100ed9a9998979695949392919061111e565b34801561019a57600080fd5b506100cc6104cd565b6100cc6101b13660046110a4565b610509565b3480156101c257600080fd5b506101cc60015481565b6040519081526020016100ed565b3480156101e657600080fd5b5060005461010090046001600160a01b03166040516001600160a01b0390911681526020016100ed565b34801561021c57600080fd5b506100cc610796565b34801561023157600080fd5b506100cc61024036600461104c565b6107ce565b6100cc6102533660046110a4565b610afc565b34801561026457600080fd5b506100cc61027336600461100d565b610dc9565b34801561028457600080fd5b506100cc610e6a565b8060015481106102b85760405162461bcd60e51b81526004016102af906110bc565b60405180910390fd5b60008281526002602052604081206008015460ff1660048111156102ec57634e487b7160e01b600052602160045260246000fd5b1461034e5760405162461bcd60e51b815260206004820152602c60248201527f537461747573206973206e6f742050454e44494e4720746f2063616e63656c2060448201526b1b1bd85b881c995c5d595cdd60a21b60648201526084016102af565b600082815260026020819052604090912001546001600160a01b0316331461037557600080fd5b6000828152600260208190526040909120600801805460ff19166001835b02179055506000828152600260205260409081902060030154905163095ea7b360e01b8152336004820152600160a01b820463ffffffff1660248201526001600160a01b0390911690819063095ea7b3906044015b600060405180830381600087803b15801561040257600080fd5b505af1158015610416573d6000803e3d6000fd5b505050600084815260026020526040908190206003015490516323b872dd60e01b8152306004820152336024820152600160a01b90910463ffffffff1660448201526001600160a01b03831691506323b872dd90606401600060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b50506040517f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b3768925060009150a1505050565b6000546001600160a01b036101009091041633146104fd5760405162461bcd60e51b81526004016102af906110e9565b6105076000610ea2565b565b80600154811061052b5760405162461bcd60e51b81526004016102af906110bc565b600160008381526002602052604090206008015460ff16600481111561056157634e487b7160e01b600052602160045260246000fd5b146105ae5760405162461bcd60e51b815260206004820152601d60248201527f5374617475732069732041435449564520746f20656e64206c6f616e2e00000060448201526064016102af565b6000828152600260205260409020600101546001600160a01b0316331480156105e857506000828152600260205260409020600701544210155b8061060d5750600082815260026020819052604090912001546001600160a01b031633145b61064f5760405162461bcd60e51b81526020600482015260136024820152722ab730b13632903a379032b732103637b0b71760691b60448201526064016102af565b600082815260026020819052604090912001546001600160a01b031633141561071f576000828152600260205260409020600401543410156106bc5760405162461bcd60e51b81526004016102af9060208082526004908201526303a3432960e51b604082015260600190565b60008281526002602052604080822060088101805460ff19166003179055600181015460049091015491516001600160a01b03909116926108fc831502929190818181858888f19350505050158015610719573d6000803e3d6000fd5b50610742565b600082815260026020526040902060080180546004919060ff1916600183610393565b6000828152600260205260409081902060030154905163095ea7b360e01b8152336004820152600160a01b820463ffffffff1660248201526001600160a01b0390911690819063095ea7b3906044016103e8565b6000546001600160a01b036101009091041633146107c65760405162461bcd60e51b81526004016102af906110e9565b610507610efb565b82821061082b5760405162461bcd60e51b815260206004820152602560248201527f496e746572657374206d757374206265206c6f776572207468616e20746865206044820152643637b0b71760d91b60648201526084016102af565b600c811061088b5760405162461bcd60e51b815260206004820152602760248201527f4d6178696d756d20696e74657265737420706572696f6473206172652031322060448201526636b7b73a34399760c91b60648201526084016102af565b600081116108e75760405162461bcd60e51b8152602060048201526024808201527f4d6178696d756d20696e74657265737420706572696f642063616e6e6f7420626044820152633290181760e11b60648201526084016102af565b60405163020604bf60e21b815263ffffffff85166004820152859030906001600160a01b0383169063081812fc9060240160206040518083038186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109689190611030565b6001600160a01b0316146109c85760405162461bcd60e51b815260206004820152602160248201527f5472616e736665722068617320746f20626520617070726f76656420666972736044820152601d60fa1b60648201526084016102af565b60018054600081815260026020819052604090912091825581830180546001600160a01b031990811690915590820180549091163317905560038101805463ffffffff8916600160a01b026001600160c01b03199091166001600160a01b038b161717905560048101869055600581018590556006810184905560088101805460ff1916905581549091610a5c91906111a2565b600155604051632142170760e11b815233600482015230602482015263ffffffff871660448201526001600160a01b038316906342842e0e90606401600060405180830381600087803b158015610ab257600080fd5b505af1158015610ac6573d6000803e3d6000fd5b50506040517f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b3768925060009150a150505050505050565b806001548110610b1e5760405162461bcd60e51b81526004016102af906110bc565b60005460ff1615610b645760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102af565b60008281526002602052604081206008015460ff166004811115610b9857634e487b7160e01b600052602160045260246000fd5b14610be55760405162461bcd60e51b815260206004820152601b60248201527f5374617475732069732050454e44494e4720666f72206c6f616e2e000000000060448201526064016102af565b600082815260026020819052604090912001546001600160a01b0316331415610c765760405162461bcd60e51b815260206004820152603760248201527f496e76616c6964206f7065726174696f6e2e20596f752063616e6e6f7420756e60448201527f646572777269746520796f7572206f776e206c6f616e2e00000000000000000060648201526084016102af565b60008281526002602052604081206005810154600490910154610c9991906111ba565b905080341015610d095760405162461bcd60e51b815260206004820152603560248201527f4e6f7420656e6f7567682045746865722073656e7420746f2066756e6374696f60448201527437103a37903ab73232b93bb934ba32903637b0b71760591b60648201526084016102af565b6000838152600260205260409020600180820180546001600160a01b0319163317905560088201805460ff1916909117905560060154610d4990426111a2565b6000848152600260208190526040808320600781019490945592015491516001600160a01b039092169183156108fc0291849190818181858888f19350505050158015610d9a573d6000803e3d6000fd5b506040517f01163e919b1fd75968a143d56990c801b68ce928c77db2aaa2ee00c1561b376890600090a1505050565b6000546001600160a01b03610100909104163314610df95760405162461bcd60e51b81526004016102af906110e9565b6001600160a01b038116610e5e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102af565b610e6781610ea2565b50565b6000546001600160a01b03610100909104163314610e9a5760405162461bcd60e51b81526004016102af906110e9565b610507610f93565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60005460ff1615610f415760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102af565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f763390565b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16610fdc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102af565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610f76565b60006020828403121561101e578081fd5b8135611029816111e7565b9392505050565b600060208284031215611041578081fd5b8151611029816111e7565b600080600080600060a08688031215611063578081fd5b853561106e816111e7565b9450602086013563ffffffff81168114611086578182fd5b94979496505050506040830135926060810135926080909101359150565b6000602082840312156110b5578081fd5b5035919050565b6020808252601390820152722637b0b71024a21034b99034b73b30b634b21760691b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8a81526001600160a01b038a8116602083015289811660408301528816606082015263ffffffff8716608082015260a0810186905260c0810185905260e08101849052610100810183905261014081016005831061118c57634e487b7160e01b600052602160045260246000fd5b826101208301529b9a5050505050505050505050565b600082198211156111b5576111b56111d1565b500190565b6000828210156111cc576111cc6111d1565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610e6757600080fdfea264697066735822122070b50e5c0c7e91a412a3b328c8af309e9b45e94b89ea330a1bf00714b8cc0c0164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 121,
        "contract": "contracts/LoanNFT.sol:LoanNFT",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/LoanNFT.sol:LoanNFT",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2854,
        "contract": "contracts/LoanNFT.sol:LoanNFT",
        "label": "totalLoanRequests",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2859,
        "contract": "contracts/LoanNFT.sol:LoanNFT",
        "label": "allLoanRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(LoanRequest)2852_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)2830": {
        "encoding": "inplace",
        "label": "enum LoanNFT.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(LoanRequest)2852_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanNFT.LoanRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanRequest)2852_storage"
      },
      "t_struct(LoanRequest)2852_storage": {
        "encoding": "inplace",
        "label": "struct LoanNFT.LoanRequest",
        "members": [
          {
            "astId": 2832,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "loanID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2834,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "lender",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 2836,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "borrower",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 2838,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "smartContractAddressOfNFT",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2840,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "tokenIdNFT",
            "offset": 20,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 2842,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "loanAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2844,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "interestAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2846,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "maximumPeriod",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2848,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "endLoanTimeStamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2851,
            "contract": "contracts/LoanNFT.sol:LoanNFT",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(Status)2830"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}